#include "verilated.h"
#include <verilated_vcd_c.h>  // For VCD waveform dump
#include "Vfibonacci.h"  // The generated header for the Verilog module
#include <iostream>

int main(int argc, char** argv) {
    // Initialize Verilator simulation
    Verilated::commandArgs(argc, argv);
    Verilated::traceEverOn(true);

    // Instantiate the Verilog module (generated by Verilator)
    Vfibonacci* top = new Vfibonacci;

    // Open the VCD file to dump waveform (optional)
    VerilatedVcdC* tfp = new VerilatedVcdC;
    top->trace(tfp, 99); // 99 is the verbosity level for tracing
    tfp->open("fibonacci.vcd");

    // Simulation loop
    int clock_cycles = 20; // Simulate for 20 clock cycles
    bool reset = true;  // Start with reset active
    top->reset = reset;

    for (int i = 0; i < clock_cycles; i++) {
        if (i > 1) {
            reset = false;
        }
        top->reset = reset;
    
        // First half of the clock (low â†’ rising edge)
        top->clk = 0;
        top->eval();
        tfp->dump(i * 2); // Dump at time t=even
        top->clk = 1;
        top->eval();
        tfp->dump(i * 2 + 1); // Dump at time t=odd
    
        if (i > 1) {
            std::cout << "Cycle " << i << " fib = " << static_cast<int>(top->fib) << "\n";
        }
    }

    // Close the VCD file
    tfp->close();

    // Clean up
    delete tfp;
    delete top;

    return 0;
}
